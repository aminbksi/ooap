// source: player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.PlayerInterface.EmptyRequest', null, global);
goog.exportSymbol('proto.PlayerInterface.GameSettings', null, global);
goog.exportSymbol('proto.PlayerInterface.GameStateMessage', null, global);
goog.exportSymbol('proto.PlayerInterface.GameUpdateMessage', null, global);
goog.exportSymbol('proto.PlayerInterface.MessageType', null, global);
goog.exportSymbol('proto.PlayerInterface.Move', null, global);
goog.exportSymbol('proto.PlayerInterface.PlayerScore', null, global);
goog.exportSymbol('proto.PlayerInterface.RegisterRequest', null, global);
goog.exportSymbol('proto.PlayerInterface.ServerUpdateMessage', null, global);
goog.exportSymbol('proto.PlayerInterface.SplitRequest', null, global);
goog.exportSymbol('proto.PlayerInterface.SubsribeRequest', null, global);
goog.exportSymbol('proto.PlayerInterface.UpdatedCell', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.GameSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInterface.GameSettings.repeatedFields_, null);
};
goog.inherits(proto.PlayerInterface.GameSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.GameSettings.displayName = 'proto.PlayerInterface.GameSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInterface.Move.repeatedFields_, null);
};
goog.inherits(proto.PlayerInterface.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.Move.displayName = 'proto.PlayerInterface.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.SplitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInterface.SplitRequest.repeatedFields_, null);
};
goog.inherits(proto.PlayerInterface.SplitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.SplitRequest.displayName = 'proto.PlayerInterface.SplitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.GameUpdateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInterface.GameUpdateMessage.repeatedFields_, null);
};
goog.inherits(proto.PlayerInterface.GameUpdateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.GameUpdateMessage.displayName = 'proto.PlayerInterface.GameUpdateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.GameStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInterface.GameStateMessage.repeatedFields_, null);
};
goog.inherits(proto.PlayerInterface.GameStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.GameStateMessage.displayName = 'proto.PlayerInterface.GameStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.UpdatedCell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInterface.UpdatedCell.repeatedFields_, null);
};
goog.inherits(proto.PlayerInterface.UpdatedCell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.UpdatedCell.displayName = 'proto.PlayerInterface.UpdatedCell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.PlayerScore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerInterface.PlayerScore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.PlayerScore.displayName = 'proto.PlayerInterface.PlayerScore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerInterface.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.RegisterRequest.displayName = 'proto.PlayerInterface.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.SubsribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerInterface.SubsribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.SubsribeRequest.displayName = 'proto.PlayerInterface.SubsribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.ServerUpdateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerInterface.ServerUpdateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.ServerUpdateMessage.displayName = 'proto.PlayerInterface.ServerUpdateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInterface.EmptyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerInterface.EmptyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerInterface.EmptyRequest.displayName = 'proto.PlayerInterface.EmptyRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInterface.GameSettings.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.GameSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.GameSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.GameSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.GameSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimensionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    startaddressList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    playeridentifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gamestarted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.GameSettings}
 */
proto.PlayerInterface.GameSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.GameSettings;
  return proto.PlayerInterface.GameSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.GameSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.GameSettings}
 */
proto.PlayerInterface.GameSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDimensions(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStartaddress(values[i]);
      }
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayeridentifier(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGamestarted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.GameSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.GameSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.GameSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.GameSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimensionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getStartaddressList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getPlayeridentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGamestarted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated int32 dimensions = 1;
 * @return {!Array<number>}
 */
proto.PlayerInterface.GameSettings.prototype.getDimensionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.setDimensionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.addDimensions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.clearDimensionsList = function() {
  return this.setDimensionsList([]);
};


/**
 * repeated int32 startAddress = 2;
 * @return {!Array<number>}
 */
proto.PlayerInterface.GameSettings.prototype.getStartaddressList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.setStartaddressList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.addStartaddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.clearStartaddressList = function() {
  return this.setStartaddressList([]);
};


/**
 * optional string playerIdentifier = 3;
 * @return {string}
 */
proto.PlayerInterface.GameSettings.prototype.getPlayeridentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.setPlayeridentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool gameStarted = 4;
 * @return {boolean}
 */
proto.PlayerInterface.GameSettings.prototype.getGamestarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PlayerInterface.GameSettings} returns this
 */
proto.PlayerInterface.GameSettings.prototype.setGamestarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInterface.Move.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    playeridentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    snakename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nextlocationList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.Move}
 */
proto.PlayerInterface.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.Move;
  return proto.PlayerInterface.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.Move}
 */
proto.PlayerInterface.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayeridentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnakename(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNextlocation(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayeridentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSnakename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNextlocationList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional string playerIdentifier = 1;
 * @return {string}
 */
proto.PlayerInterface.Move.prototype.getPlayeridentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.Move} returns this
 */
proto.PlayerInterface.Move.prototype.setPlayeridentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string snakeName = 2;
 * @return {string}
 */
proto.PlayerInterface.Move.prototype.getSnakename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.Move} returns this
 */
proto.PlayerInterface.Move.prototype.setSnakename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated int32 nextLocation = 3;
 * @return {!Array<number>}
 */
proto.PlayerInterface.Move.prototype.getNextlocationList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PlayerInterface.Move} returns this
 */
proto.PlayerInterface.Move.prototype.setNextlocationList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.Move} returns this
 */
proto.PlayerInterface.Move.prototype.addNextlocation = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.Move} returns this
 */
proto.PlayerInterface.Move.prototype.clearNextlocationList = function() {
  return this.setNextlocationList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInterface.SplitRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.SplitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.SplitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.SplitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.SplitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playeridentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oldsnakename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newsnakename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    snakesegment: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nextlocationList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.SplitRequest}
 */
proto.PlayerInterface.SplitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.SplitRequest;
  return proto.PlayerInterface.SplitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.SplitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.SplitRequest}
 */
proto.PlayerInterface.SplitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayeridentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldsnakename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewsnakename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnakesegment(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNextlocation(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.SplitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.SplitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.SplitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.SplitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayeridentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOldsnakename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewsnakename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSnakesegment();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNextlocationList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
};


/**
 * optional string playerIdentifier = 1;
 * @return {string}
 */
proto.PlayerInterface.SplitRequest.prototype.getPlayeridentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.setPlayeridentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string oldSnakeName = 2;
 * @return {string}
 */
proto.PlayerInterface.SplitRequest.prototype.getOldsnakename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.setOldsnakename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string newSnakeName = 3;
 * @return {string}
 */
proto.PlayerInterface.SplitRequest.prototype.getNewsnakename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.setNewsnakename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 snakeSegment = 4;
 * @return {number}
 */
proto.PlayerInterface.SplitRequest.prototype.getSnakesegment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.setSnakesegment = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated int32 nextLocation = 5;
 * @return {!Array<number>}
 */
proto.PlayerInterface.SplitRequest.prototype.getNextlocationList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.setNextlocationList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.addNextlocation = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.SplitRequest} returns this
 */
proto.PlayerInterface.SplitRequest.prototype.clearNextlocationList = function() {
  return this.setNextlocationList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInterface.GameUpdateMessage.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.GameUpdateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.GameUpdateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.GameUpdateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedcellsList: jspb.Message.toObjectList(msg.getUpdatedcellsList(),
    proto.PlayerInterface.UpdatedCell.toObject, includeInstance),
    removedsnakesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    playerscoresList: jspb.Message.toObjectList(msg.getPlayerscoresList(),
    proto.PlayerInterface.PlayerScore.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.GameUpdateMessage}
 */
proto.PlayerInterface.GameUpdateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.GameUpdateMessage;
  return proto.PlayerInterface.GameUpdateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.GameUpdateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.GameUpdateMessage}
 */
proto.PlayerInterface.GameUpdateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayerInterface.UpdatedCell;
      reader.readMessage(value,proto.PlayerInterface.UpdatedCell.deserializeBinaryFromReader);
      msg.addUpdatedcells(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemovedsnakes(value);
      break;
    case 3:
      var value = new proto.PlayerInterface.PlayerScore;
      reader.readMessage(value,proto.PlayerInterface.PlayerScore.deserializeBinaryFromReader);
      msg.addPlayerscores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.GameUpdateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.GameUpdateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.GameUpdateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedcellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PlayerInterface.UpdatedCell.serializeBinaryToWriter
    );
  }
  f = message.getRemovedsnakesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPlayerscoresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PlayerInterface.PlayerScore.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UpdatedCell updatedCells = 1;
 * @return {!Array<!proto.PlayerInterface.UpdatedCell>}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.getUpdatedcellsList = function() {
  return /** @type{!Array<!proto.PlayerInterface.UpdatedCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInterface.UpdatedCell, 1));
};


/**
 * @param {!Array<!proto.PlayerInterface.UpdatedCell>} value
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
*/
proto.PlayerInterface.GameUpdateMessage.prototype.setUpdatedcellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PlayerInterface.UpdatedCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.UpdatedCell}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.addUpdatedcells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PlayerInterface.UpdatedCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
 */
proto.PlayerInterface.GameUpdateMessage.prototype.clearUpdatedcellsList = function() {
  return this.setUpdatedcellsList([]);
};


/**
 * repeated string removedSnakes = 2;
 * @return {!Array<string>}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.getRemovedsnakesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
 */
proto.PlayerInterface.GameUpdateMessage.prototype.setRemovedsnakesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
 */
proto.PlayerInterface.GameUpdateMessage.prototype.addRemovedsnakes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
 */
proto.PlayerInterface.GameUpdateMessage.prototype.clearRemovedsnakesList = function() {
  return this.setRemovedsnakesList([]);
};


/**
 * repeated PlayerScore playerScores = 3;
 * @return {!Array<!proto.PlayerInterface.PlayerScore>}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.getPlayerscoresList = function() {
  return /** @type{!Array<!proto.PlayerInterface.PlayerScore>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInterface.PlayerScore, 3));
};


/**
 * @param {!Array<!proto.PlayerInterface.PlayerScore>} value
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
*/
proto.PlayerInterface.GameUpdateMessage.prototype.setPlayerscoresList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PlayerInterface.PlayerScore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.PlayerScore}
 */
proto.PlayerInterface.GameUpdateMessage.prototype.addPlayerscores = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PlayerInterface.PlayerScore, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.GameUpdateMessage} returns this
 */
proto.PlayerInterface.GameUpdateMessage.prototype.clearPlayerscoresList = function() {
  return this.setPlayerscoresList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInterface.GameStateMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.GameStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.GameStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.GameStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.GameStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedcellsList: jspb.Message.toObjectList(msg.getUpdatedcellsList(),
    proto.PlayerInterface.UpdatedCell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.GameStateMessage}
 */
proto.PlayerInterface.GameStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.GameStateMessage;
  return proto.PlayerInterface.GameStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.GameStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.GameStateMessage}
 */
proto.PlayerInterface.GameStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayerInterface.UpdatedCell;
      reader.readMessage(value,proto.PlayerInterface.UpdatedCell.deserializeBinaryFromReader);
      msg.addUpdatedcells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.GameStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.GameStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.GameStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.GameStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedcellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PlayerInterface.UpdatedCell.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UpdatedCell updatedCells = 1;
 * @return {!Array<!proto.PlayerInterface.UpdatedCell>}
 */
proto.PlayerInterface.GameStateMessage.prototype.getUpdatedcellsList = function() {
  return /** @type{!Array<!proto.PlayerInterface.UpdatedCell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInterface.UpdatedCell, 1));
};


/**
 * @param {!Array<!proto.PlayerInterface.UpdatedCell>} value
 * @return {!proto.PlayerInterface.GameStateMessage} returns this
*/
proto.PlayerInterface.GameStateMessage.prototype.setUpdatedcellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PlayerInterface.UpdatedCell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.UpdatedCell}
 */
proto.PlayerInterface.GameStateMessage.prototype.addUpdatedcells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PlayerInterface.UpdatedCell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.GameStateMessage} returns this
 */
proto.PlayerInterface.GameStateMessage.prototype.clearUpdatedcellsList = function() {
  return this.setUpdatedcellsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInterface.UpdatedCell.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.UpdatedCell.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.UpdatedCell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.UpdatedCell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.UpdatedCell.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    player: jspb.Message.getFieldWithDefault(msg, 2, ""),
    foodvalue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.UpdatedCell}
 */
proto.PlayerInterface.UpdatedCell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.UpdatedCell;
  return proto.PlayerInterface.UpdatedCell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.UpdatedCell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.UpdatedCell}
 */
proto.PlayerInterface.UpdatedCell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddress(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFoodvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.UpdatedCell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.UpdatedCell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.UpdatedCell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.UpdatedCell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getPlayer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFoodvalue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated int32 address = 1;
 * @return {!Array<number>}
 */
proto.PlayerInterface.UpdatedCell.prototype.getAddressList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PlayerInterface.UpdatedCell} returns this
 */
proto.PlayerInterface.UpdatedCell.prototype.setAddressList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PlayerInterface.UpdatedCell} returns this
 */
proto.PlayerInterface.UpdatedCell.prototype.addAddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PlayerInterface.UpdatedCell} returns this
 */
proto.PlayerInterface.UpdatedCell.prototype.clearAddressList = function() {
  return this.setAddressList([]);
};


/**
 * optional string player = 2;
 * @return {string}
 */
proto.PlayerInterface.UpdatedCell.prototype.getPlayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.UpdatedCell} returns this
 */
proto.PlayerInterface.UpdatedCell.prototype.setPlayer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 foodValue = 3;
 * @return {number}
 */
proto.PlayerInterface.UpdatedCell.prototype.getFoodvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerInterface.UpdatedCell} returns this
 */
proto.PlayerInterface.UpdatedCell.prototype.setFoodvalue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.PlayerScore.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.PlayerScore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.PlayerScore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.PlayerScore.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    score: jspb.Message.getFieldWithDefault(msg, 2, 0),
    snakes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.PlayerScore}
 */
proto.PlayerInterface.PlayerScore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.PlayerScore;
  return proto.PlayerInterface.PlayerScore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.PlayerScore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.PlayerScore}
 */
proto.PlayerInterface.PlayerScore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnakes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.PlayerScore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.PlayerScore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.PlayerScore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.PlayerScore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSnakes();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.PlayerInterface.PlayerScore.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.PlayerScore} returns this
 */
proto.PlayerInterface.PlayerScore.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 score = 2;
 * @return {number}
 */
proto.PlayerInterface.PlayerScore.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerInterface.PlayerScore} returns this
 */
proto.PlayerInterface.PlayerScore.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 snakes = 3;
 * @return {number}
 */
proto.PlayerInterface.PlayerScore.prototype.getSnakes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerInterface.PlayerScore} returns this
 */
proto.PlayerInterface.PlayerScore.prototype.setSnakes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.RegisterRequest}
 */
proto.PlayerInterface.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.RegisterRequest;
  return proto.PlayerInterface.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.RegisterRequest}
 */
proto.PlayerInterface.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.PlayerInterface.RegisterRequest.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.RegisterRequest} returns this
 */
proto.PlayerInterface.RegisterRequest.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.SubsribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.SubsribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.SubsribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.SubsribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playeridentifier: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.SubsribeRequest}
 */
proto.PlayerInterface.SubsribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.SubsribeRequest;
  return proto.PlayerInterface.SubsribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.SubsribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.SubsribeRequest}
 */
proto.PlayerInterface.SubsribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayeridentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.SubsribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.SubsribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.SubsribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.SubsribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayeridentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerIdentifier = 1;
 * @return {string}
 */
proto.PlayerInterface.SubsribeRequest.prototype.getPlayeridentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.SubsribeRequest} returns this
 */
proto.PlayerInterface.SubsribeRequest.prototype.setPlayeridentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.ServerUpdateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.ServerUpdateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.ServerUpdateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.ServerUpdateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.ServerUpdateMessage}
 */
proto.PlayerInterface.ServerUpdateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.ServerUpdateMessage;
  return proto.PlayerInterface.ServerUpdateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.ServerUpdateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.ServerUpdateMessage}
 */
proto.PlayerInterface.ServerUpdateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PlayerInterface.MessageType} */ (reader.readEnum());
      msg.setMessagetype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.ServerUpdateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.ServerUpdateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.ServerUpdateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.ServerUpdateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional MessageType messageType = 1;
 * @return {!proto.PlayerInterface.MessageType}
 */
proto.PlayerInterface.ServerUpdateMessage.prototype.getMessagetype = function() {
  return /** @type {!proto.PlayerInterface.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.PlayerInterface.MessageType} value
 * @return {!proto.PlayerInterface.ServerUpdateMessage} returns this
 */
proto.PlayerInterface.ServerUpdateMessage.prototype.setMessagetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.PlayerInterface.ServerUpdateMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerInterface.ServerUpdateMessage} returns this
 */
proto.PlayerInterface.ServerUpdateMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInterface.EmptyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInterface.EmptyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInterface.EmptyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.EmptyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInterface.EmptyRequest}
 */
proto.PlayerInterface.EmptyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInterface.EmptyRequest;
  return proto.PlayerInterface.EmptyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInterface.EmptyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInterface.EmptyRequest}
 */
proto.PlayerInterface.EmptyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInterface.EmptyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInterface.EmptyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInterface.EmptyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInterface.EmptyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.PlayerInterface.MessageType = {
  GAMESTATECHANGE: 0,
  PLAYERJOINED: 1
};

goog.object.extend(exports, proto.PlayerInterface);
